{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement","null"],"mappings":";;;;;;AACA,IAAIA,oBAAqB,YAAY;;AAEpC,KAAMC,SAAS,CAAC,aAAD,CAAf;AACA,KAAMC,UAAU,CAAhB;AACA,KAAMC,SAAS,YAAf;;AAEA,KAAIC,aAAa,IAAjB;;AAEA,KAAIC,QAAQ,IAAZ;;AAEA;AAEC,+BAAc;AAAA;;AAEb,SAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACA;;AALF;AAAA;AAAA,mCAOwB;AACtB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,SAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsB,YAAtB,EAAoC,CAApC,CAAlB;;AAEAH,iBAAYI,eAAZ,GAA8B,aAAK;;AAElCd,wBAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACA,MAHD;;AAKAR,iBAAYS,SAAZ,GAAwB,aAAK;;AAE5B,UAAG,CAACf,UAAJ,EAAgB;AACfA,oBAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,eAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,kBAAWC,KAAX,GAAmB,YAAY;AAC9B,cAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACA,QAFD;AAGA;AACDE,cAAQJ,UAAR;AACA,MAVD;;AAYAM,iBAAYW,OAAZ,GAAsB,aAAK;AAC1BC,cAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,aAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACA,MAJD;AAMA,KA3BM,CAAP;AA4BA;AApCF;AAAA;AAAA,iCAsCsBrB,UAtCtB,EAsCkC;;AAEhCH,WAAOyB,OAAP,CAAe,kBAAU;AACvB,SAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACCzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEDzB,gBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,KALD;AAMA;AA9CF;AAAA;AAAA,qCAgD0B;;AAExB,QAAG5B,UAAH,EAAe;;AAEdC;AACAD,gBAAW6B,IAAX;AACA;AACD;AAvDF;;AAAA;AAAA;AAyDA,CAnEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["\nvar ConnectionFactory = (function () {\n\n\tconst stores = ['negociacoes'];\n\tconst version = 4;\n\tconst dbName = 'aluraframe';\n\n\tvar connection = null;\n\n\tvar close = null;\n\n\treturn class ConnectionFactory {\n\n\t\tconstructor() {\n\n\t\t\tthrow new Error('Não é possível criar instâncias de ConnectionFactory');\n\t\t}\n\n\t\tstatic getConnection() {\n\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\tlet openRequest = window.indexedDB.open('aluraframe', 4);\n\n\t\t\t\topenRequest.onupgradeneeded = e => {\n\t\t\t\t\t\n\t\t\t\t\tConnectionFactory._createStores(e.target.result);\n\t\t\t\t};\n\n\t\t\t\topenRequest.onsuccess = e => {\n\t\t\t\t\t\n\t\t\t\t\tif(!connection) {\n\t\t\t\t\t\tconnection = e.target.result;\n\t\t\t\t\t\tclose = connection.close.bind(connection);\n\t\t\t\t\t\tconnection.close = function () {\n\t\t\t\t\t\t\tthrow new Error('Você não pode fechar diretamente a conexão');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresolve(connection);\n\t\t\t\t};\n\n\t\t\t\topenRequest.onerror = e => {\n\t\t\t\t\tconsole.log(e.target.error);\n\n\t\t\t\t\treject(e.target.error.name);\n\t\t\t\t};\n\n\t\t\t});\n\t\t}\n\n\t\tstatic _createStores(connection) {\n\t\t\t\n\t\t\tstores.forEach(stores => {\n\t\t\t  if (connection.objectStoreNames.contains(store))\n\t\t\t  \tconnection.deleteObjectStore(store);\n\n\t\t\t  connection.createObjectStore(store, { autoIncrement: true});\n\t\t\t});\n\t\t}\n\n\t\tstatic closeConnection() {\n\n\t\t\tif(connection) {\n\n\t\t\t\tclose();\n\t\t\t\tconnection.null;\n\t\t\t}\n\t\t}\n\t}\n})();"]}